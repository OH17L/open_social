<?php

/**
 * @file
 * Provides Public group type and related configuration.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupType;
use Drupal\social_group\Form\SocialGroupAddForm;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_query_alter().
 */
function social_public_group_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    return;
  }

  if (empty($view->rowPlugin) || !($view->rowPlugin instanceof EntityRow) || $view->rowPlugin->getEntityTypeId() != 'group') {
    return;
  }

  $found = FALSE;

  foreach ($query->where as &$conditions_group) {
    foreach ($conditions_group['conditions'] as &$conditions) {
      $field = $conditions['field'] == 'groups_field_data.type';

      if ($field && $conditions['operator'] == 'not in') {
        $found = TRUE;
        break 2;
      }
    }
  }

  if (!$found) {
    return;
  }

  foreach (GroupType::loadMultiple() as $group_type) {
    $new = !in_array($group_type->id(), $conditions['value']);
    $permissions = $group_type->getAnonymousRole()->getPermissions();
    $hidden = !in_array('view group', $permissions);

    if ($new && $hidden) {
      $conditions['value'][] = $group_type->id();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function social_public_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $items = [
    'social_post_entity_form' => [
      'field' => 'field_visibility',
      'value' => 1,
    ],
    'node_event_form' => [
      'field' => 'field_content_visibility',
      'value' => 'public',
    ],
    'node_event_edit_form' => [
      'field' => 'field_content_visibility',
      'value' => 'public',
    ],
    'node_topic_form' => [
      'field' => 'field_content_visibility',
      'value' => 'public',
    ],
    'node_topic_edit_form' => [
      'field' => 'field_content_visibility',
      'value' => 'public',
    ],
  ];

  if (isset($items[$form_id])) {
    $group = \Drupal::routeMatch()->getParameter('group');
    $entity = $form_state->getFormObject()->getEntity();

    // Parameter may not exists if it is node edit page.
    if (!isset($group) && $entity->id()) {
      $group_content = GroupContent::loadByEntity($entity);

      if ($group_content = current($group_content)) {
        $group = $group_content->getGroup();
      }
    }

    if (is_numeric($group)) {
      $group = Group::load($group);
    }

    if (!($group instanceof GroupInterface) || $group->bundle() != 'public_group') {
      return;
    }

    $entity_manager = \Drupal::service('entity_field.manager');
    $fields = $entity_manager->getFieldStorageDefinitions($form['#entity_type']);
    $field_name = $items[$form_id]['field'];
    $values = $fields[$field_name]->getSetting('allowed_values');

    if (is_numeric($key = $items[$form_id]['value'])) {
      $form_field = &$form[$field_name]['widget'][0];
    }
    else {
      $form_field = &$form[$field_name]['widget'];
    }

    $form_field['#options'] = [$key => $values[$key]];
    $form_field['#default_value'] = (string) $key;
  }

  switch ($form_id) {
    case 'group_content_public_group-group_membership_group-join_form':
    case 'group_content_public_group-group_membership_group-leave_form':
    case 'group_content_public_group-group_membership_add_form':
    case 'group_content_public_group-group_membership_edit_form':
      $form['actions']['cancel'] = [
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#submit' => ['_social_group_cancel_join_leave_form'],
        '#limit_validation_errors' => [],
      ];

      $form['actions']['submit']['#submit'][] = '_social_group_action_form_submit';

      if (isset($form['path'])) {
        $form['path']['#access'] = FALSE;
      }

      if (\Drupal::currentUser()->id() !== 1 && isset($form['group_roles']['widget']['#options']['public_group-group_admin'])) {
        unset($form['group_roles']['widget']['#options']['public_group-group_admin']);
      }
      break;

    case 'group_public_group_edit_form':
    case 'group_public_group_add_form':
      $form['path']['#type'] = 'hidden';
      $form['actions']['submit']['#value'] = t('Save');
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_public_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';

  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_public_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $group = $form_state->getFormObject()->getEntity();
  $entity_type_manager = \Drupal::entityTypeManager();
  $form['group_type'] = (new SocialGroupAddForm($entity_type_manager))->getGroupTypeElement();
  $form['group_type']['#default_value'] = $group->bundle();
  $form['group_type']['#disabled'] = TRUE;
  $form['#group_children']['group_type'] = 'group_content';

  if (\Drupal::moduleHandler()->moduleExists('social_course')) {
    $course_wrapper = \Drupal::service('social_course.course_wrapper');
    $available_bundles = $course_wrapper::getAvailableBundles();
    $form['group_type']['#options'] = array_filter($form['group_type']['#options'], function ($key) use ($available_bundles) {
      return !in_array($key, $available_bundles);
    }, ARRAY_FILTER_USE_KEY);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function social_public_group_group_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'public_group') {
    $ids = \Drupal::database()
      ->select('post__field_recipient_group', 'p')
      ->fields('p', ['entity_id'])
      ->condition('field_recipient_group_target_id', $entity->id())
      ->execute()
      ->fetchCol();

    if (!empty($ids)) {
      $queue = \Drupal::queue('public_group_queue');
      $item = new \stdClass();
      $item->entity_type = 'post';

      foreach ($ids as $id) {
        $item->entity_id = $id;
        $queue->createItem($item);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function social_public_group_group_content_delete(EntityInterface $entity) {
  if ($entity->getGroup()->bundle() == 'public_group') {
    $related_entity = $entity->getEntity();

    if ($related_entity && $related_entity->getEntityTypeId() == 'node') {
      $queue = \Drupal::queue('public_group_queue');
      $item = new \stdClass();
      $item->entity_type = 'node';
      $item->entity_id = $related_entity->id();
      $queue->createItem($item);
    }
  }
}

/**
 * Implements hook_cron().
 */
function social_public_group_cron() {
  $queue = \Drupal::queue('public_group_queue');
  $items = $queue->numberOfItems();

  if ($items > 10) {
    $items = 10;
  }

  for (; $items > 0; $items--) {
    $item = $queue->claimItem();

    if (!empty($item)) {
      $storage = \Drupal::entityTypeManager()->getStorage($item->data->entity_type);
      if ($entity = $storage->load($item->data->entity_id)) {
        $entity->delete();
      }
      $queue->deleteItem($item);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_public_group_preprocess_group__hero(&$variables) {
  /** @var GroupInterface $group */
  $group = $variables['group'];
  $account = \Drupal::currentUser();

  if ($group->bundle() == 'public_group' && $account->isAnonymous()) {
    $variables['group_operations_url'] = Url::fromRoute('user.login', [], [
      'query' => [
        'destination' => Url::fromRoute('entity.group.join', [
          'group' => $group->id(),
        ])->toString(),
      ],
    ])->toString();
  }
}
